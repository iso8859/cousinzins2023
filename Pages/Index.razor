@page "/"
@using System.Text.Json;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Index</PageTitle>
@if (g != null)
{
    <div>
        <p>@g.cards.Count(_ => _.isCorrect())/@g.cards.Count() réponses correctes.</p>
        <p><a href="https://cousinzins.fr/inscription">Pour vous inscrire à notre newsletter.</a></p>
        <p>Trouvez le nom des stands ou vous croisez des affiches Cousinzins.</p>
        <p>Venez montrer que vous avez tout trouvé ou obtenir des indices au stand des Cousinzins, Salle 3</p>
    </div>
    @foreach (Card c in g.cards)
    {
        <div class="box">
            <img src="/images/@c.image" alt="@c.image" />
            <p>Réponse : <input id="@c.image" type="text" value="@c.data" @oninput="(s)=>onchange(s, c)" /></p>
            <p>La réponse est @c.status()</p>
        </div>
    }
    <div>
        <button onclick="(e)=>@reset()">Tout effacer</button>
    </div>
}

@code {
    Game g;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            g = new Game();
            if (await localStorage.ContainKeyAsync("g"))
                try
                {
                    g.SetAnswers(await localStorage.GetItemAsStringAsync("g"));
                }
                catch
                {
                    await localStorage.RemoveItemAsync("g");
                    g = new Game();
                }
            StateHasChanged();
        }
    }

    async Task onchange(ChangeEventArgs e, Card c)
    {
        c.data = e.Value.ToString();
        await localStorage.SetItemAsStringAsync("g", g.GetAnswers());
        StateHasChanged();
    }

    async Task reset()
    {
        await localStorage.RemoveItemAsync("g");
    }
}
